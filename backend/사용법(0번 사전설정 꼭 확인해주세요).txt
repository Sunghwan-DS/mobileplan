0.사전설정
src/main/resources/application.properties
spring.datasource.url=jdbc:mysql://localhost:3306/db이름
자신이 db(mariadb or my-sql)에서 설정한 스키마(db)명으로 수정
db명을 수정해야 db와 백엔드가 정상 연결되서 백엔드가 실행됨

1. 로그인 (GET)
＊요청 url
localhost:8080/blog/account/login?email=이메일,password=비밀번호
ex) localhost:8080/blog/account/login?email=test@test.com&password=1234
＊반환값
json 형식으로 결과 return
요청 보낸 이메일과 비밀번호와 일치하는 데이터가 있을 경우
{
  uid : "1",
  email : "test@test,com",
  password:"1234"
}
일치하는 데이터가 없을 경우
{
  uid : "null",
  email : "null",
  password:"null"
}

2. 이메일 체크 (GET)
＊요청 url
localhost:8080/blog/account/check/확인하고자 하는 이메일
ex) localhost:8080/blog/account/check/test@test.com
＊반환값
문자열을 반환함
이메일 주소가 이미 db에 있는 경우
fail
이메일 주소가 db에 없는 경우
success

3. 회원가입 (POST)
＊요청 url
localhost:8080/blog/account/signup
아래의 json 형식으로 데이터를 넘겨 주면 됨
{
  uid : "유저닉네임",
  email : "이메일",
  password:"비밀번호"
}
＊반환값
문자열을 반환함
db에 데이터를 성공적으로 추가한 경우
success
db에 데이터 추가에 실패한 경우
fail

4. 회원정보 수정(PUT)
＊요청 url
localhost:8080/blog/account/modify
아래의 json 형식으로 데이터를 넘겨 주면 됨
{
  uid : "유저닉네임", 	- primary 키 이기 때문에 수정 X
  email : "이메일",		- 바꾼 이메일
  password:"비밀번호"	- 바꾼 비밀번호
}
※변경한 email과 password를 보내면 됨
＊반환값
문자열을 반환함
db에 성공적으로 데이터를 수정한 경우
success
db에서 데이터를 수정 못한 경우
fail

5. 회원 탈퇴(DELETE)
＊요청 url
localhost:8080/blog/account/delete/탈퇴할 uid
예시) localhost:8080/blog/account/delete/1
＊반환값
문자열을 반환함
db에 성공적으로 데이터를 삭제한 경우
success
db에서 데이터를 삭제 못한 경우
fail
